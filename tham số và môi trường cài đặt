4.4 Các tham số và môi trường cài đặt

# Validation for hyper-parameter tuning.
# Randomly splits the input dataset into train and validation sets,
# and uses evaluation metric on the validation set to select the best model.
rf = RandomForestClassifier(
    featuresCol="features", labelCol="label", predictionCol="prediction", maxBins=16
)

# Use a ParamGridBuilder to construct a grid of parameters to search over.
# TrainValidationSplit will try all combinations of values and determine best model using the evaluator.
paramGrid = (
    ParamGridBuilder()
    .addGrid(rf.maxDepth, [8, 10, 12])
    .addGrid(rf.minInstancesPerNode, [1, 3, 5, 10])
    .addGrid(rf.numTrees, [50, 100])
    .build()
)

# In this case the estimator is BinaryClassificationEvaluator
# A TrainValidationSplit requires an Estimator, a set of Estimator ParamMaps, and an Evaluator.
tvs = TrainValidationSplit(
    estimator=rf,
    estimatorParamMaps=paramGrid,
    evaluator=BinaryClassificationEvaluator(),
    trainRatio=0.8,
)  # 80% of the data will be used for training, 20% for validation.

# Run TrainValidationSplit, and choose the best set of parameters.
model = tvs.fit(train)

Trong đoạn mã trên, chúng ta đang thực hiện quá trình tinh chỉnh siêu tham số (hyper-parameter tuning) cho mô hình Random Forest Classifier bằng cách sử dụng kỹ thuật Train-Validation Split. Dưới đây là giải thích chi tiết về các tham số được sử dụng trong quá trình tinh chỉnh:

RandomForestClassifier: Là một mô hình phân loại dựa trên cây quyết định, trong đó các cây quyết định được sử dụng để xây dựng một tập hợp các cây ngẫu nhiên, và kết quả cuối cùng là sự bỏ phiếu của các cây đó.

featuresCol: Là tên cột chứa các đặc trưng (features) trong dữ liệu.

labelCol: Là tên cột chứa nhãn (labels) trong dữ liệu, đây là nhãn dự đoán.

predictionCol: Là tên cột trong DataFrame kết quả được dự đoán.

maxBins: Là số lượng tối đa của các bin khi chia các đặc trưng liên tục thành các bin. Đây là một siêu tham số của Random Forest.

ParamGridBuilder: Là một builder để tạo ra một lưới các tham số để tinh chỉnh. Trong đoạn mã này, chúng ta tạo một lưới các giá trị cho các tham số của mô hình Random Forest như maxDepth, minInstancesPerNode, và numTrees.

maxDepth: Là độ sâu tối đa của các cây quyết định trong mô hình Random Forest.

minInstancesPerNode: Số lượng mẫu tối thiểu cần có trong một nút lá của cây quyết định.

numTrees: Số lượng cây quyết định trong mô hình Random Forest.

TrainValidationSplit: Là một kỹ thuật tinh chỉnh siêu tham số trong đó tập dữ liệu được chia thành tập huấn luyện và tập validation. Các tham số mô hình được đánh giá dựa trên hiệu suất trên tập validation.

estimator: Mô hình cần được tinh chỉnh, trong trường hợp này là mô hình Random Forest Classifier.

estimatorParamMaps: Là một lưới các tham số cần được đánh giá.

evaluator: Bộ đánh giá sẽ được sử dụng để đánh giá hiệu suất của mô hình trên tập validation. Trong đoạn mã này, chúng ta sử dụng BinaryClassificationEvaluator để đánh giá mô hình dựa trên đánh giá về hiệu suất phân loại nhị phân.

trainRatio: Tỷ lệ dữ liệu sẽ được sử dụng cho việc huấn luyện, phần còn lại sẽ được sử dụng cho việc validation. Trong đoạn mã này, chúng ta sử dụng tỷ lệ 80-20, tức là 80% dữ liệu sẽ được sử dụng cho huấn luyện và 20% còn lại sẽ được sử dụng cho validation.

fit(train): Thực hiện quá trình tinh chỉnh siêu tham số bằng cách sử dụng Train-Validation Split trên tập dữ liệu huấn luyện (train). Kết quả là một mô hình tốt nhất được chọn dựa trên hiệu suất trên tập validation.



# Validation for hyper-parameter tuning.
# Randomly splits the input dataset into train and validation sets,
# and uses evaluation metric on the validation set to select the best model.
gbt = GBTClassifier(
    featuresCol="features", labelCol="label", predictionCol="prediction"
)

# Use a ParamGridBuilder to construct a grid of parameters to search over.
# TrainValidationSplit will try all combinations of values and determine best model using the evaluator.
paramGrid = (
    ParamGridBuilder()
    .addGrid(gbt.maxDepth, [8, 10])
    .addGrid(gbt.minInstancesPerNode, [5, 20, 50])
    .addGrid(gbt.maxIter, [10, 20])
    .build()
)

# In this case the estimator is BinaryClassificationEvaluator
# A TrainValidationSplit requires an Estimator, a set of Estimator ParamMaps, and an Evaluator.
tvs = TrainValidationSplit(
    estimator=gbt,
    estimatorParamMaps=paramGrid,
    evaluator=BinaryClassificationEvaluator(),
    trainRatio=0.8,
)  # 80% of the data will be used for training, 20% for validation.

# Run TrainValidationSplit, and choose the best set of parameters.
model = tvs.fit(train)

# Make predictions on test data. model is the model with combination of parameters that performed best.
model.transform(test).select("features", "label", "prediction").show(10)


Trong đoạn mã trên, chúng ta đang thực hiện quá trình tinh chỉnh siêu tham số (hyper-parameter tuning) cho mô hình Gradient Boosted Tree (GBT) Classifier bằng cách sử dụng kỹ thuật Train-Validation Split. Dưới đây là giải thích chi tiết về các tham số được sử dụng trong quá trình tinh chỉnh:

GBTClassifier: Là một mô hình phân loại dựa trên cây quyết định, trong đó các cây quyết định được sử dụng để xây dựng một tập hợp các cây ngẫu nhiên, và kết quả cuối cùng là sự bỏ phiếu của các cây đó.

featuresCol: Là tên cột chứa các đặc trưng (features) trong dữ liệu.

labelCol: Là tên cột chứa nhãn (labels) trong dữ liệu, đây là nhãn dự đoán.

predictionCol: Là tên cột trong DataFrame kết quả được dự đoán.

ParamGridBuilder: Là một builder để tạo ra một lưới các tham số để tinh chỉnh. Trong đoạn mã này, chúng ta tạo một lưới các giá trị cho các tham số của mô hình GBT như maxDepth, minInstancesPerNode, và maxIter.

maxDepth: Là độ sâu tối đa của các cây quyết định trong mô hình GBT.

minInstancesPerNode: Số lượng mẫu tối thiểu cần có trong một nút lá của cây quyết định.

maxIter: Số lượng lần lặp tối đa khi huấn luyện mô hình.

TrainValidationSplit: Là một kỹ thuật tinh chỉnh siêu tham số trong đó tập dữ liệu được chia thành tập huấn luyện và tập validation. Các tham số mô hình được đánh giá dựa trên hiệu suất trên tập validation.

estimator: Mô hình cần được tinh chỉnh, trong trường hợp này là mô hình GBT Classifier.

estimatorParamMaps: Là một lưới các tham số cần được đánh giá.

evaluator: Bộ đánh giá sẽ được sử dụng để đánh giá hiệu suất của mô hình trên tập validation. Trong đoạn mã này, chúng ta sử dụng BinaryClassificationEvaluator để đánh giá mô hình dựa trên đánh giá về hiệu suất phân loại nhị phân.

trainRatio: Tỷ lệ dữ liệu sẽ được sử dụng cho việc huấn luyện, phần còn lại sẽ được sử dụng cho việc validation. Trong đoạn mã này, chúng ta sử dụng tỷ lệ 80-20, tức là 80% dữ liệu sẽ được sử dụng cho huấn luyện và 20% còn lại sẽ được sử dụng cho validation.

fit(train): Thực hiện quá trình tinh chỉnh siêu tham số bằng cách sử dụng Train-Validation Split trên tập dữ liệu huấn luyện (train). Kết quả là một mô hình tốt nhất được chọn dựa trên hiệu suất trên tập validation.
